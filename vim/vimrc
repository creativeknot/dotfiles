" Name: Arnold Chand
" Github: https://github.com/creativenull
" Description: My vimrc, currently tested on a Linux machine.
" Requires:
"   + git
"   + curl
"   + python3
"   + ripgrep
"
" =============================================================================
" = User Initialize (USER) =
" =============================================================================

let mapleader = "\<Space>"
let s:user = {}
let s:user.enable_transparent = v:true

" Vim filepaths
" ---

let s:user.config = {}
if has('win32')
  let s:user.config.cachedir = expand('$HOME/AppData/Local/Temp/vim')
  let s:user.config.configdir = expand('$HOME')
  let s:user.config.datadir = expand('$HOME/vimfiles')
else
  let s:user.config.cachedir = expand('$HOME/.cache/vim')
  let s:user.config.configdir = expand('$HOME')
  let s:user.config.datadir = expand('$HOME/.vim')
endif

let s:user.config.undodir = printf('%s/undo', s:user.config.cachedir)

" Enable vim features
" ---

filetype plugin indent on
syntax on

" Hard dependencies
" ---

" Pre-Requisites
let s:exec_list = ['git', 'curl', 'python3', 'rg', 'node', 'deno']
for s:exec in s:exec_list
  if !executable(s:exec)
    echoerr printf('[vim] `%s` is needed!', s:exec)
    finish
  endif
endfor

" OS Specific options
" ---

" For Windows
if has('win32')
  if !executable('pwsh')
    echoerr '[vim] PowerShell Core >= v6 is required!'
    finish
  endif

  set shell=pwsh
  let s:shcmd_flag = [
    \ '-NoLogo',
    \ '-NoProfile',
    \ '-ExecutionPolicy',
    \ 'RemoteSigned',
    \ '-Command',
    \ '[Console]::InputEncoding=[Console]::OutputEncoding=[System.Text.Encoding]::UTF8;',
  \ ]
  let &shellcmdflag = join(s:shcmd_flag, ' ')
  let &shellredir = '2>&1 | Out-File -Encoding UTF8 %s; exit $LastExitCode'
  let &shellpipe = '2>&1 | Out-File -Encoding UTF8 %s; exit $LastExitCode'
  set shellquote= shellxquote=
endif

" =============================================================================
" = User Commands (CMD) =
" =============================================================================

command! Config edit $MYVIMRC
command! ConfigReload source $MYVIMRC | nohlsearch

command! ToggleConcealLevel call cnull#utils#ToggleConcealLevel()
command! ToggleCodeshot call cnull#utils#ToggleCodeshot()

command! MyTodoPersonal edit ~/todofiles/personal/README.md
command! MyTodoWork edit ~/todofiles/work/README.md

" Command Abbreviations, I can't release my shift key fast enough ðŸ˜­
cnoreabbrev Q  q
cnoreabbrev Qa qa
cnoreabbrev W  w
cnoreabbrev Wq wq

" =============================================================================
" = Autocmds (AUG) =
" =============================================================================

if s:user.enable_transparent
  augroup transparent_user_events
    autocmd!

    " Core highlights to make transparent
    autocmd ColorScheme * highlight! Normal guibg=NONE
    autocmd ColorScheme * highlight! SignColumn guibg=NONE
    autocmd ColorScheme * highlight! LineNr guibg=NONE guifg=#888888
    autocmd ColorScheme * highlight! CursorLineNr guibg=NONE
    autocmd ColorScheme * highlight! EndOfBuffer guibg=NONE
    autocmd ColorScheme * highlight! Visual guibg=#555555

    " Sometimes comments are too dark, affects in tranparent mode
    autocmd ColorScheme * highlight! Comment guifg=#888888

    " Make tabline bg tranparent
    autocmd ColorScheme * highlight! TabLineFill guibg=NONE
    autocmd ColorScheme * highlight! TabLine guibg=NONE

    " Float Border
    autocmd ColorScheme * highlight! NormalFloat guibg=NONE
    autocmd ColorScheme * highlight! FloatBorder guibg=NONE guifg=#eeeeee

    " Vertical Line
    autocmd ColorScheme * highlight! ColorColumn guibg=#999999

  augroup END
endif

augroup customhl_user_events
  autocmd!

  " Different color when confirming selected substitution with `:s`
  autocmd ColorScheme * highlight IncSearch gui=NONE guibg=#103DA5 guifg=#eeeeee

augroup END

" =============================================================================
" = Options (OPT) =
" =============================================================================

" Create a dir for tracking undo
if !isdirectory(s:user.config.undodir)
  if has('win32')
    execute printf('silent !mkdir -Recurse %s', s:user.config.undodir)
  else
    execute printf('silent !mkdir -p %s', s:user.config.undodir)
  endif
endif

" Completion
set completeopt=menuone,noinsert,noselect
set shortmess+=c
set wildmenu

" Search
set hlsearch
set ignorecase
set incsearch
set path=**
set showmatch
set smartcase

" Editor
set autoindent
set colorcolumn=120
set expandtab
set iskeyword+=-
set lazyredraw
set nofoldenable
set nospell
set nowrap
set scrolloff=3
set shiftwidth=4
set smartindent
set smarttab
set softtabstop=4
set tabstop=4
set wildignorecase

" System
let &undodir=s:user.config.undodir
set backspace=indent,eol,start
set encoding=utf-8
set history=10000
set mouse=a
set nobackup
set noswapfile
set ttimeoutlen=50
set undofile
set undolevels=10000
set updatetime=250

" UI
set cmdheight=2
set hidden
set laststatus=2
set number
set showtabline=2
set signcolumn=yes
if has('termguicolors')
  set termguicolors
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif

" =============================================================================
" = Keybindings (KEY) =
" =============================================================================

" Unbind default bindings for arrow keys, trust me this is for your own good
noremap  <Up>    <Nop>
noremap  <Down>  <Nop>
noremap  <Left>  <Nop>
noremap  <Right> <Nop>
inoremap <Up>    <Nop>
inoremap <Down>  <Nop>
inoremap <Left>  <Nop>
inoremap <Right> <Nop>

" Resize window panes, we can use those arrow keys
" to help use resize windows - at least we give them some purpose
nnoremap <Up>    <Cmd>resize +2<CR>
nnoremap <Down>  <Cmd>resize -2<CR>
nnoremap <Left>  <Cmd>vertical resize -2<CR>
nnoremap <Right> <Cmd>vertical resize +2<CR>

" Map Esc, to perform quick switching between Normal and Insert mode
inoremap jk <Esc>

" Map escape from terminal input to Normal mode
tnoremap <Esc> <C-\><C-n>
tnoremap <C-[> <C-\><C-n>

" Disable highlights
nnoremap <Leader><CR> <Cmd>noh<CR>

" List all buffers
nnoremap <Leader>bb <Cmd>buffers<CR>

" Go to next buffer
nnoremap <C-l> <Cmd>bnext<CR>
nnoremap <Leader>bn <Cmd>bnext<CR>

" Go to previous buffer
nnoremap <C-h> <Cmd>bprevious<CR>
nnoremap <Leader>bp <Cmd>bprevious<CR>

" Close the current buffer, and more?
nnoremap <Leader>bd <Cmd>bp<Bar>sp<Bar>bn<Bar>bd<CR>

" Close all buffer, except current
nnoremap <Leader>bx <Cmd>%bd<Bar>e#<Bar>bd#<CR>

" Edit vimrc
nnoremap <Leader>ve <Cmd>edit $MYVIMRC<CR>

" Source the vimrc to reflect changes
nnoremap <Leader>vs <Cmd>ConfigReload<CR>

" Reload file
nnoremap <Leader>r <Cmd>edit!<CR>

" List all maps
nnoremap <Leader>mn <Cmd>nmap<CR>
nnoremap <Leader>mv <Cmd>vmap<CR>
nnoremap <Leader>mi <Cmd>imap<CR>
nnoremap <Leader>mt <Cmd>tmap<CR>
nnoremap <Leader>mc <Cmd>cmap<CR>

" Move lines up/down with alt+j/k
set <M-j>=j
set <M-k>=k
nnoremap <M-j> :m .+1<CR>==
nnoremap <M-k> :m .-2<CR>==
vnoremap <M-j> :m '>+1<CR>gv=gv
vnoremap <M-k> :m '<-2<CR>gv=gv

" Copy/Paste system clipboard
nnoremap <Leader>y "+y
nnoremap <Leader>p "+p
nnoremap Y y$

" Format entire file with =
nnoremap g= gg=G

" Execute last recorded macro
nnoremap Q @@

" =============================================================================
" = Plugin Manager (PLUG) =
" =============================================================================

" Bootstrap - download vim-plug into autoload directory if it doesn't exist
let s:plug = {}
let s:plug.git = 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
let s:plug.path = s:user.config.datadir . '/autoload/plug.vim'
let s:plug.pluginsdir = s:user.config.datadir . '/plugged'

if !filereadable(s:plug.path)
  execute printf('!curl -fLo %s --create-dirs %s', s:plug.path, s:plug.git)
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin(s:plug.pluginsdir)

" Plugin dependencies {{{
Plug 'Shougo/context_filetype.vim'
Plug 'vim-denops/denops.vim'
Plug 'lambdalisue/nerdfont.vim'
" }}}

" Core {{{
Plug 'cohama/lexima.vim'
Plug 'godlygeek/tabular'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-repeat'
Plug 'tyru/caw.vim'
Plug 'editorconfig/editorconfig-vim'
Plug 'creativenull/projectlocal-vim'
Plug 'mattn/emmet-vim' | call cnull#emmet#Setup()
" }}}

" File Explorer {{{
Plug 'lambdalisue/fern.vim' | call cnull#fern#Setup()
Plug 'lambdalisue/nerdfont.vim'
Plug 'lambdalisue/fern-renderer-nerdfont.vim'
" }}}

" Fuzzy Finder {{{
Plug 'junegunn/fzf' | call cnull#fzf#Setup()
Plug 'junegunn/fzf.vim'
" }}}

" Snippets {{{
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
" }}}

" Git {{{
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter' | let g:gitgutter_map_keys = 0
" }}}

" Linter and formatter configurations {{{
Plug 'dense-analysis/ale' | call cnull#ale#Setup()
" }}}

" Auto completion + LSP client {{{
Plug 'neoclide/coc.nvim', { 'branch': 'release' } | call cnull#coc#Setup()
Plug 'fannheyward/coc-deno', { 'do': 'yarn install --frozen-lockfile' }
Plug 'marlonfan/coc-phpls', { 'do': 'yarn install --frozen-lockfile' }
Plug 'neoclide/coc-css', { 'do': 'yarn install --frozen-lockfile' }
Plug 'neoclide/coc-html', { 'do': 'yarn install --frozen-lockfile' }
Plug 'neoclide/coc-json', { 'do': 'yarn install --frozen-lockfile' }
Plug 'neoclide/coc-snippets', { 'do': 'yarn install --frozen-lockfile' }
Plug 'neoclide/coc-tsserver', { 'do': 'yarn install --frozen-lockfile' }
Plug 'neoclide/coc-vetur', { 'do': 'yarn install --frozen-lockfile' }
Plug 'yaegassy/coc-volar', { 'do': 'yarn install --frozen-lockfile' }
" }}}

" File syntax plugins {{{
Plug 'pangloss/vim-javascript'
Plug 'MaxMEllon/vim-jsx-pretty'
Plug 'heavenshell/vim-jsdoc', { 'do': 'make install' }
Plug 'posva/vim-vue' | let g:vue_pre_processors = []
Plug 'jwalton512/vim-blade'
Plug 'elzr/vim-json' | let g:vim_json_conceal = 0
Plug 'kevinoid/vim-jsonc'
Plug 'junegunn/vader.vim'
" }}}

" UI Plugins
" ---
Plug 'Yggdroot/indentLine' | let g:indentLine_char = 'â”‚'
Plug 'machakann/vim-highlightedyank' | call cnull#highlightedyank#Setup()
Plug 'itchyny/lightline.vim' | call cnull#lightline#Setup()
Plug 'mengelbrecht/lightline-bufferline'

" Colorschemes {{{
Plug 'bluz71/vim-nightfly-guicolors'
Plug 'bluz71/vim-moonfly-colors'
Plug 'gruvbox-community/gruvbox'
Plug 'fnune/base16-vim'
Plug 'rigellute/rigel'
" }}}

call plug#end()

" =============================================================================
" = UI/Theme (THEME) =
" =============================================================================

set background=dark
colorscheme moonfly
