" Name: Arnold Chand
" Github: https://github.com/creativenull
" Description: My vimrc works with MacOS, Linux and Windows.
" Requires:
"   + curl
"   + git
"   + python3
"   + ripgrep
" ============================================================================
" Initialize
"
" Tags: CONFIG
" ============================================================================

let g:config = {}
let g:config.key = {}
let g:config.key.leader = "\<Space>"

if has('win32')
  let g:config.cachedir = expand('$HOME/AppData/Local/Temp/vim')
  let g:config.configdir = expand('$HOME')
  let g:config.datadir = expand('$HOME/vimfiles')
else
  let g:config.cachedir = expand('$HOME/.cache/vim')
  let g:config.configdir = expand('$HOME')
  let g:config.datadir = expand('$HOME/.vim')
endif

let g:config.undodir = printf('%s/undo', g:config.cachedir)

let mapleader = g:config.key.leader

" Enable vim features
" ---
unlet! skip_defaults_vim
source $VIMRUNTIME/defaults.vim

filetype plugin indent on
syntax on

" ============================================================================
" Functions
"
" Tags: FUNC
" ============================================================================

" Check if the vim instance is running on a WSL vm
" Ref: https://github.com/neovim/neovim/issues/12642#issuecomment-658944841
function! s:IsWSL() abort
  let s:proc_version = '/proc/version'

  if !filereadable(s:proc_version)
    return 0
  endif

  let s:proc_result = readfile(s:proc_version, '', 1)->filter('v:val =~? "microsoft"')

  return !s:proc_result->empty()
endfunction

" Strip sign column, number line, etc to be able
" to copy and paste from a vim instance that has
" mouse disabled, or not able to use `"+y`.
"
" Example of such and instance is running vim in WSL2
function! s:ToggleCodeshot() abort
  if &number
    setlocal nonumber signcolumn=no
  else
    setlocal number signcolumn=yes
  endif
endfunction

" Toggle the conceallevel, should any syntax plugin overtake
" and hide/conceal words
function! s:ToggleConcealLevel() abort
  if &conceallevel == 2
    setlocal conceallevel=0
  else
    setlocal conceallevel=2
  endif
endfunction

function! s:PasteFromClipboard() abort
  set paste
  normal! "+p
  set nopaste
endfunction

" ============================================================================
" Events
"
" Tags: AU
" ============================================================================

augroup UserGroup

" Different color when confirming selected substitution with `:s`
autocmd UserGroup ColorScheme * highlight IncSearch gui=NONE guibg=#103DA5 guifg=#eeeeee

" Custom default indent rules
autocmd UserGroup FileType javascript,javascriptreact setlocal softtabstop=2 shiftwidth=2 expandtab
autocmd UserGroup FileType json,jsonc setlocal softtabstop=2 shiftwidth=2 expandtab
autocmd UserGroup FileType markdown setlocal iskeyword+= softtabstop=2 shiftwidth=2 expandtab
autocmd UserGroup FileType php,blade,html setlocal iskeyword+= softtabstop=2 shiftwidth=2 expandtab
autocmd UserGroup FileType scss,sass,css setlocal softtabstop=2 shiftwidth=2 expandtab
autocmd UserGroup FileType typescript,typescriptreact setlocal softtabstop=2 shiftwidth=2 expandtab
autocmd UserGroup FileType vim,lua setlocal softtabstop=2 shiftwidth=2 expandtab
autocmd UserGroup FileType vue setlocal iskeyword+= softtabstop=2 shiftwidth=2 expandtab

" ============================================================================
" Options
"
" Tags: OPT
" ============================================================================

" Ensure dir for storing undo changes
if !isdirectory(g:config.undodir)
  if has('win32')
    execute printf('silent !mkdir %s', g:config.undodir)
  else
    execute printf('silent !mkdir -p %s', g:config.undodir)
  endif
endif

" Completion
set completeopt=menuone,noinsert,noselect
set shortmess+=c
set wildmenu
set wildoptions=pum,fuzzy

" Search
set hlsearch
set ignorecase
set incsearch
set path=**
set showmatch
set smartcase

" Editor
set autoindent
set colorcolumn=120
set lazyredraw
set nofoldenable
set nospell
set nowrap
set scrolloff=1
set smartindent
set smarttab
set wildignorecase

" System
let &undodir=g:config.undodir
set backspace=indent,eol,start
set encoding=utf-8
set history=10000
set nobackup
set noswapfile
set ttimeoutlen=50
set undofile
set undolevels=10000
set updatetime=250
set clipboard-=autoselect

if <SID>IsWSL()
  set mouse=
else
  set mouse=nv
endif

" UI
set cmdheight=2
set hidden
set laststatus=2
set number
set showtabline=2
set signcolumn=yes

if has('termguicolors')
  set termguicolors
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif

" ============================================================================
" Keymaps
"
" Tags: KEY
" ============================================================================

" Unbind default bindings for arrow keys, trust me this is for your own good
noremap  <Up>    <Nop>
noremap  <Down>  <Nop>
noremap  <Left>  <Nop>
noremap  <Right> <Nop>
inoremap <Up>    <Nop>
inoremap <Down>  <Nop>
inoremap <Left>  <Nop>
inoremap <Right> <Nop>

" Resize window panes, we can use those arrow keys
" to help use resize windows - at least we give them some purpose
nnoremap <Up>    <Cmd>resize +2<CR>
nnoremap <Down>  <Cmd>resize -2<CR>
nnoremap <Left>  <Cmd>vertical resize -2<CR>
nnoremap <Right> <Cmd>vertical resize +2<CR>

" Map Esc, to perform quick switching between Normal and Insert mode
inoremap jk <Esc>

" Map escape from terminal input to Normal mode
tnoremap <Esc> <C-\><C-n>
tnoremap <C-[> <C-\><C-n>

" Disable highlights
nnoremap <Leader><CR> <Cmd>noh<CR>

" List all buffers
nnoremap <Leader>bb <Cmd>buffers<CR>

" Go to next buffer
nnoremap <C-l> <Cmd>bnext<CR>
nnoremap <Leader>bn <Cmd>bnext<CR>

" Go to previous buffer
nnoremap <C-h> <Cmd>bprevious<CR>
nnoremap <Leader>bp <Cmd>bprevious<CR>

" Close the current buffer, and more?
nnoremap <Leader>bd <Cmd>bp<Bar>sp<Bar>bn<Bar>bd<CR>

" Close all buffer, except current
nnoremap <Leader>bx <Cmd>%bd<Bar>e#<Bar>bd#<CR>

" Edit vimrc
nnoremap <Leader>ve <Cmd>edit $MYVIMRC<CR>

" Source the vimrc to reflect changes
nnoremap <Leader>vs <Cmd>ConfigReload<CR>

" Reload file
nnoremap <Leader>r <Cmd>edit!<CR>

" Move lines up/down with alt+j/k
nnoremap <A-j> :m .+1<CR>==
nnoremap <A-k> :m .-2<CR>==
inoremap <A-j> <Esc>:m .+1<CR>==gi
inoremap <A-k> <Esc>:m .-2<CR>==gi
vnoremap <A-j> :m '>+1<CR>gv=gv
vnoremap <A-k> :m '<-2<CR>gv=gv

" Copy/Paste system clipboard
nnoremap <Leader>y "+y
nnoremap <Leader>p <Cmd>call <SID>PasteFromClipboard()<CR>
nnoremap Y y$

" Execute last recorded macro
nnoremap Q @@

" ============================================================================
" User Commands
"
" Tags: CMD
" ============================================================================

command! Config edit $MYVIMRC
command! ConfigReload source $MYVIMRC | nohlsearch

command! ToggleConcealLevel call <SID>ToggleConcealLevel()
command! ToggleCodeshot call <SID>ToggleCodeshot()

" Command Abbreviations, I can't release my shift key fast enough ðŸ˜­
cnoreabbrev Q  q
cnoreabbrev Qa qa
cnoreabbrev W  w
cnoreabbrev Wq wq

" ============================================================================
" Plugins
"
" Tags: PLUG
" ============================================================================

let data_dir = '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin()

" Plugin dependencies {{{
Plug 'lambdalisue/nerdfont.vim', { 'tag': 'v1.3.0' }
Plug 'vim-denops/denops.vim', { 'tag': 'v3.2.0' }
" }}}

" Core {{{
Plug 'cohama/lexima.vim', { 'commit': 'fbc05de53ca98b7f36a82f566db1df49864e58ef' }
Plug 'creativenull/projectlocal-vim', { 'tag': 'v0.4.3' }
Plug 'editorconfig/editorconfig-vim', { 'commit': 'd354117b72b3b43b75a29b8e816c0f91af10efe9' }
Plug 'junegunn/vim-easy-align', { 'commit': '12dd6316974f71ce333e360c0260b4e1f81169c3' }
Plug 'mattn/emmet-vim'
Plug 'tpope/vim-abolish', { 'tag': 'v1.1' }
Plug 'tpope/vim-repeat', { 'commit': '24afe922e6a05891756ecf331f39a1f6743d3d5a' }
Plug 'tpope/vim-surround', { 'tag': 'v2.2' }
Plug 'Shougo/context_filetype.vim', { 'commit': '28768168261bca161c3f2599e0ed63c96aab6dea' }
Plug 'tyru/caw.vim', { 'commit': '3aefcb5a752a599a9200dd801d6bcb0b7606bf29' }
" }}}

" File Explorer {{{
Plug 'lambdalisue/fern.vim', { 'tag': 'v1.51.3' }
Plug 'lambdalisue/fern-renderer-nerdfont.vim', { 'commit': '1e90a78ab5510fbcedc85abeb9a251d978726935' }
Plug 'lambdalisue/glyph-palette.vim', { 'tag': 'v1.4.0' }
" }}}

" Fuzzy Finder {{{
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
" }}}

" Git {{{
Plug 'tpope/vim-fugitive', { 'tag': 'v3.7' }
Plug 'itchyny/vim-gitbranch'
Plug 'airblade/vim-gitgutter'
" }}}

" Linter and formatter configurations {{{
Plug 'dense-analysis/ale'
" }}}

" LSP client + auto-completion {{{
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" }}}

" UI {{{
Plug 'itchyny/lightline.vim', { 'commit': 'b02ef0d9f253dfc1cbb3f340b74998d7a4db0bf6' }
Plug 'mengelbrecht/lightline-bufferline', { 'commit': '8b6e29e65e9711b75df289879186ff3888feed00' }
Plug 'Yggdroot/indentLine', { 'commit': 'd15d63bf9c4a74a02470d4bc8ecce53df13e3a75' }
Plug 'machakann/vim-highlightedyank', { 'commit': 'f9db473137ca96c6a989ec3e2b7edf8a3189c448' }
Plug 'markonm/traces.vim', { 'commit': '9663fcf84de5776bee71b6c816c25ccb6ea11d1a' }
" }}}

" File syntax plugins {{{
Plug 'elzr/vim-json'
Plug 'kevinoid/vim-jsonc'
Plug 'junegunn/vader.vim'
Plug 'jwalton512/vim-blade'
Plug 'pangloss/vim-javascript'
Plug 'MaxMEllon/vim-jsx-pretty'
Plug 'posva/vim-vue'
Plug 'MTDL9/vim-log-highlighting'
Plug 'lacygoill/vim9-syntax'
" }}}

" Colorschemes {{{
Plug 'bluz71/vim-moonfly-colors'
Plug 'bluz71/vim-nightfly-guicolors'
Plug 'fnune/base16-vim'
" }}}

call plug#end()

" ============================================================================
" Plugin Configurations
"
" Tags: POST
" ============================================================================

" fzf.vim Config
" ---
let $FZF_DEFAULT_COMMAND = 'rg --files --hidden --iglob !.git'
let $FZF_DEFAULT_OPTS = '--reverse'
let g:fzf_preview_window = []

function! s:VimGrep(qargs, bang) abort
  let s:sh = 'rg --column --line-number --no-heading --color=always --smart-case -- ' .. shellescape(a:qargs)
  call fzf#vim#grep(s:sh, 1, fzf#vim#with_preview('right:50%', 'ctrl-/'), a:bang)
endfunction

command! -bang -nargs=* Rg call <SID>VimGrep(<q-args>, <bang>0)

nnoremap <C-p> <Cmd>Files<CR>
nnoremap <C-t> <Cmd>Rg<CR>

autocmd UserGroup ColorScheme * highlight! fzfBorder guifg=#aaaaaa

" fern.vim Config
" ---
let g:fern#hide_cursor = 1
let g:fern#renderer = 'nerdfont'
let g:fern#renderer#nerdfont#indent_markers = 1
let g:fern#renderer#nerdfont#root_symbol = 'î­… '

function! s:InitFern() abort
  nnoremap <buffer> <nowait> q <Cmd>bd<CR>
  nmap <buffer> D <Plug>(fern-action-remove)

  call glyph_palette#apply()
endfunction

nnoremap <silent> <Leader>ff <Cmd>Fern . -reveal=%<CR>

autocmd UserGroup FileType fern call <SID>InitFern()

" ale Config
" ---
let g:ale_completion_enabled = 0
let g:ale_disable_lsp = 1
let g:ale_hover_cursor = 0
let g:ale_echo_msg_error_str = 'Err'
let g:ale_sign_error = 'ï™™ '
let g:ale_echo_msg_warning_str = 'Warn'
let g:ale_sign_warning = 'ï”© '
let g:ale_echo_msg_info_str = 'Info'
let g:ale_sign_info = 'ï µ '
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_linters_explicit = 1
let g:ale_fixers = { '*': ['remove_trailing_lines', 'trim_whitespace'] }

nnoremap <silent> <Leader>ai <Cmd>ALEInfo<CR>
nnoremap <silent> <Leader>af <Cmd>ALEFix<CR>
nnoremap <silent> <Leader>al <Cmd>lopen<CR>

" Update lightline whenever ALE lints or formats the code
autocmd UserGroup User ALEJobStarted call lightline#update()
autocmd UserGroup User ALELintPost call lightline#update()
autocmd UserGroup User ALEFixPost call lightline#update()

" coc.nvim Config
" ---
let g:coc_global_extensions = [
\ 'coc-json',
\ 'coc-html',
\ 'coc-css',
\ 'coc-git',
\ 'coc-tsserver',
\ 'coc-flow',
\ '@yaegassy/coc-volar',
\ 'coc-deno',
\ 'coc-phpls',
\]

function! s:CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

inoremap <silent> <expr> <C-n> coc#pum#visible()
      \ ? coc#pum#next(1)
      \ : <SID>CheckBackspace() ? "\<C-n>" : coc#refresh()
inoremap <expr> <C-p> coc#pum#visible() ? coc#pum#prev(1) : "\<C-p>"

inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm() : "\<CR>"
inoremap <silent><expr> <Tab> coc#pum#visible() ? coc#pum#confirm() : "\<Tab>"
inoremap <silent><expr> <C-y> coc#pum#visible() ? coc#pum#confirm() : "\<C-y>"

inoremap <silent><expr> <c-@> coc#refresh()

nnoremap <Leader>lh <Cmd>if CocAction('hasProvider', 'hover')<Bar>call CocActionAsync('doHover')<Bar>endif<CR>
nnoremap <Leader>lr <Cmd>call CocActionAsync('format')<CR>
nmap <Leader>ld <Plug>(coc-definition)
nmap <Leader>lf <Plug>(lsp-document-format)
nmap <Leader>la <Plug>(coc-codeaction-cursor)
nmap <Leader>le <Cmd>CocList diagnostics<CR>
nmap <Leader>l] <Plug>(coc-diagnostic-next)
nmap <Leader>l[ <Plug>(coc-diagnostic-prev)
nnoremap <silent> <expr> <nowait> <Down> coc#float#has_scroll() ? coc#float#scroll(1) : "\<Up>"
nnoremap <silent> <expr> <nowait> <Up> coc#float#has_scroll() ? coc#float#scroll(0) : "\<Down>"
inoremap <silent> <expr> <nowait> <Down> coc#float#has_scroll() ? "\<C-r>=coc#float#scroll(1)\<CR>" : "\<Up>"
inoremap <silent> <expr> <nowait> <Up> coc#float#has_scroll() ? "\<C-r>=coc#float#scroll(0)\<CR>" : "\<Down>"

" Tsserver
command! -nargs=0 TSOrganizeImports call CocActionAsync('runCommand', 'editor.action.organizeImports')

augroup UserCocGroup

autocmd UserCocGroup CursorHold * silent call CocActionAsync('highlight')
autocmd UserCocGroup User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
autocmd UserCocGroup ColorScheme * highlight UserCocFloat guibg=NONE guifg=#aaaaaa
autocmd UserCocGroup ColorScheme * highlight UserCocFloatBorder guibg=NONE guifg=#aaaaaa

" vim-gitgutter Config
" ---
let g:gitgutter_map_keys = 0

" emmet-vim Config
" ---
let g:user_emmet_leader_key = '<C-q>'
let g:user_emmet_install_global = 0
let g:user_emmet_mode = 'i'

autocmd UserGroup FileType html,vue,astro EmmetInstall
autocmd UserGroup FileType javascript,javascriptreact,typescript,typescriptreact EmmetInstall
autocmd UserGroup FileType php,blade EmmetInstall
autocmd UserGroup FileType twig,html.twig,htmldjango.twig,xml.twig EmmetInstall

" vim-highlightedyank Config
" ---
let g:highlightedyank_highlight_duration = 300

autocmd UserGroup ColorScheme * highlight! default link HighlightedyankRegion IncSearch

" vim-vue Config
" ---
let g:vue_pre_processors = []

" vim-json Config
" ---
let g:vim_json_syntax_conceal = 0

" indentLine Config
" ---
let g:indentLine_char = 'â”‚'

" vim-lightline Config
" ---
let g:lightline = {
\ 'colorscheme': 'tailwind_cnull',
\ 'enable': {
\   'statusline': 1,
\   'tabline': 1,
\ },
\
\ 'tabline': {
\   'left': [ ['buffers'] ],
\   'right': [ ['filetype'] ],
\ },
\
\ 'component': { 'lineinfo': 'î‚¡ %l/%L î‚£ %c' },
\
\ 'separator': {
\   'left': 'î‚¸',
\   'right': 'î‚º',
\ },
\
\ 'active': {
\   'left': [ ['filename'], ['gitbranch', 'readonly', 'modified'] ],
\   'right': [
\     ['ale_err', 'ale_warn', 'ale_status'],
\     ['filetype', 'fileencoding'],
\     ['coc_status', 'lineinfo'],
\   ],
\ },
\
\ 'inactive': {
\   'left': [ ['filename'], ['gitbranch', 'modified'] ],
\   'right': [ [], [], ['lineinfo'] ],
\ },
\
\ 'component_function': {
\   'gitbranch': 'gitbranch#name',
\   'ale_status': 'AleStatus',
\   'coc_status': 'coc#status',
\ },
\
\ 'component_expand': {
\   'ale_err': 'AleErrComponent',
\   'ale_warn': 'AleWarnComponent',
\   'buffers': 'lightline#bufferline#buffers',
\ },
\
\ 'component_type': {
\   'ale_err': 'error',
\   'ale_warn': 'warning',
\   'buffers': 'tabsel',
\ },
\}

function! g:AleErrComponent() abort
  if exists('g:loaded_ale')
    let l:info = ale#statusline#Count(bufnr(''))
    let l:errors = l:info.error

    if l:errors > 0
      return printf('%d', l:errors)
    endif
  endif

  return ''
endfunction

function! g:AleWarnComponent() abort
  if exists('g:loaded_ale')
    let l:info = ale#statusline#Count(bufnr(''))
    let l:warnings = l:info.warning

    if l:warnings > 0
      return printf('%d', l:warnings)
    endif
  endif

  return ''
endfunction

function! g:AleStatus() abort
  if exists('g:loaded_ale')
    return 'ALE'
  endif

  return ''
endfunction

" ============================================================================
" Theme
"
" Tags: THEME
" ============================================================================

let g:moonflyNormalFloat = 1

set background=dark
colorscheme moonfly
