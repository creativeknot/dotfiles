" Name: Arnold Chand
" Github: https://github.com/creativenull
" Description: My vimrc, currently tested on a Linux machine.
" Requires:
"   + git
"   + curl
"   + python3
"   + ripgrep
"
" =============================================================================
" = User Initialize (USER) =
" =============================================================================

let mapleader = "\<Space>"

let g:user = {}
let g:user.enable_transparent = v:true

" Vim filepaths
" ---

let g:user.config = {}

if has('win32')
  let g:user.config.cachedir = expand('$HOME/AppData/Local/Temp/vim')
  let g:user.config.configdir = expand('$HOME')
  let g:user.config.datadir = expand('$HOME/vimfiles')
else
  let g:user.config.cachedir = expand('$HOME/.cache/vim')
  let g:user.config.configdir = expand('$HOME')
  let g:user.config.datadir = expand('$HOME/.vim')
endif

let g:user.config.undodir = printf('%s/undo', g:user.config.cachedir)

" Enable vim features
" ---

unlet! skip_defaults_vim
source $VIMRUNTIME/defaults.vim

filetype plugin indent on
syntax on

" Hard dependencies
" ---

" Pre-Requisites
let s:exec_list = ['git', 'curl', 'python3', 'rg', 'node', 'deno']
for s:exec in s:exec_list
  if !executable(s:exec)
    echoerr printf('[vim] `%s` is needed!', s:exec)

    finish
  endif
endfor

" OS Specific options
" ---

" For Windows
if has('win32')
  if !executable('pwsh')
    echoerr '[vim] PowerShell Core >= v6 is required!'

    finish
  endif

  let s:shcmd_flag = [
    \ '-NoLogo',
    \ '-NoProfile',
    \ '-ExecutionPolicy',
    \ 'RemoteSigned',
    \ '-Command',
    \ '[Console]::InputEncoding=[Console]::OutputEncoding=[System.Text.Encoding]::UTF8;',
  \ ]

  let &shellcmdflag = join(s:shcmd_flag, ' ')
  let &shellredir = '2>&1 | Out-File -Encoding UTF8 %s; exit $LastExitCode'
  let &shellpipe = '2>&1 | Out-File -Encoding UTF8 %s; exit $LastExitCode'
  set shell=pwsh
  set shellquote=
  set shellxquote=
endif

" =============================================================================
" = User Commands (CMD) =
" =============================================================================

command! Config edit $MYVIMRC
command! ConfigReload source $MYVIMRC | nohlsearch

command! ToggleConcealLevel call cnull#utils#ToggleConcealLevel()
command! ToggleCodeshot call cnull#utils#ToggleCodeshot()

command! MyTodoPersonal edit ~/todofiles/personal/README.md
command! MyTodoWork edit ~/todofiles/work/README.md

" Command Abbreviations, I can't release my shift key fast enough ðŸ˜­
cnoreabbrev Q  q
cnoreabbrev Qa qa
cnoreabbrev W  w
cnoreabbrev Wq wq

" =============================================================================
" = Autocmds (AUG) =
" =============================================================================

function! s:set_transparent_highlights() abort
  if g:user.enable_transparent
    " Core highlights to make transparent
    highlight Normal cterm=NONE ctermbg=NONE gui=NONE guibg=NONE
    highlight SignColumn cterm=NONE ctermbg=NONE gui=NONE guibg=NONE
    highlight LineNr gui=NONE guibg=NONE guifg=#888888
    highlight CursorLineNr cterm=NONE ctermbg=NONE gui=NONE guibg=NONE
    highlight EndOfBuffer cterm=NONE ctermbg=NONE gui=NONE guibg=NONE
    highlight Visual cterm=NONE gui=NONE guibg=#555555

    " Sometimes comments are too dark, affects in tranparent mode
    highlight Comment cterm=NONE ctermbg=NONE gui=NONE guibg=NONE guifg=#aaaaaa

    " Make tabline bg tranparent
    highlight TabLineFill cterm=NONE ctermbg=NONE gui=NONE guibg=NONE
    highlight TabLine cterm=NONE ctermbg=NONE gui=NONE guibg=NONE

    " Float Border
    highlight NormalFloat cterm=NONE ctermbg=NONE gui=NONE guibg=NONE
    highlight FloatBorder cterm=NONE ctermbg=NONE gui=NONE guibg=NONE guifg=#eeeeee

    " Vertical Line
    highlight ColorColumn cterm=NONE gui=NONE guibg=#999999
  endif
endfunction

augroup transparent_user_events
  autocmd!

  autocmd ColorScheme * call s:set_transparent_highlights()
augroup END

augroup customhl_user_events
  autocmd!

  " Different color when confirming selected substitution with `:s`
  autocmd ColorScheme * highlight IncSearch gui=NONE guibg=#103DA5 guifg=#eeeeee
augroup END

" =============================================================================
" = Options (OPT) =
" =============================================================================

" Ensure dir for storing undo changes
if !isdirectory(g:user.config.undodir)
  if has('win32')
    execute printf('silent !mkdir -Recurse %s', g:user.config.undodir)
  else
    execute printf('silent !mkdir -p %s', g:user.config.undodir)
  endif
endif

" Completion
set completeopt=menuone,noinsert,noselect
set shortmess+=c
set wildmenu

" Search
set hlsearch
set ignorecase
set incsearch
set path=**
set showmatch
set smartcase

" Editor
set autoindent
set colorcolumn=120
set expandtab
set iskeyword+=-
set lazyredraw
set nofoldenable
set nospell
set nowrap
set scrolloff=3
set shiftwidth=4
set smartindent
set smarttab
set softtabstop=4
set tabstop=8
set wildignorecase

" System
let &undodir=g:user.config.undodir
set backspace=indent,eol,start
set encoding=utf-8
set history=10000
set mouse=a
set nobackup
set noswapfile
set ttimeoutlen=50
set undofile
set undolevels=10000
set updatetime=250

" UI
set cmdheight=2
set hidden
set laststatus=2
set number
set showtabline=2
set signcolumn=yes

if has('termguicolors')
  set termguicolors
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif

" =============================================================================
" = Keybindings (KEY) =
" =============================================================================

" Unbind default bindings for arrow keys, trust me this is for your own good
noremap  <Up>    <Nop>
noremap  <Down>  <Nop>
noremap  <Left>  <Nop>
noremap  <Right> <Nop>
inoremap <Up>    <Nop>
inoremap <Down>  <Nop>
inoremap <Left>  <Nop>
inoremap <Right> <Nop>

" Resize window panes, we can use those arrow keys
" to help use resize windows - at least we give them some purpose
nnoremap <Up>    <Cmd>resize +2<CR>
nnoremap <Down>  <Cmd>resize -2<CR>
nnoremap <Left>  <Cmd>vertical resize -2<CR>
nnoremap <Right> <Cmd>vertical resize +2<CR>

" Map Esc, to perform quick switching between Normal and Insert mode
inoremap jk <Esc>

" Map escape from terminal input to Normal mode
tnoremap <Esc> <C-\><C-n>
tnoremap <C-[> <C-\><C-n>

" Disable highlights
nnoremap <Leader><CR> <Cmd>noh<CR>

" List all buffers
nnoremap <Leader>bb <Cmd>buffers<CR>

" Go to next buffer
nnoremap <C-l> <Cmd>bnext<CR>
nnoremap <Leader>bn <Cmd>bnext<CR>

" Go to previous buffer
nnoremap <C-h> <Cmd>bprevious<CR>
nnoremap <Leader>bp <Cmd>bprevious<CR>

" Close the current buffer, and more?
nnoremap <Leader>bd <Cmd>bp<Bar>sp<Bar>bn<Bar>bd<CR>

" Close all buffer, except current
nnoremap <Leader>bx <Cmd>%bd<Bar>e#<Bar>bd#<CR>

" Edit vimrc
nnoremap <Leader>ve <Cmd>edit $MYVIMRC<CR>

" Source the vimrc to reflect changes
nnoremap <Leader>vs <Cmd>ConfigReload<CR>

" Reload file
nnoremap <Leader>r <Cmd>edit!<CR>

" List all maps
nnoremap <Leader>mn <Cmd>nmap<CR>
nnoremap <Leader>mv <Cmd>vmap<CR>
nnoremap <Leader>mi <Cmd>imap<CR>
nnoremap <Leader>mt <Cmd>tmap<CR>
nnoremap <Leader>mc <Cmd>cmap<CR>

" Move lines up/down with alt+j/k
set <M-j>=j
set <M-k>=k
nnoremap <M-j> :m .+1<CR>==
nnoremap <M-k> :m .-2<CR>==
vnoremap <M-j> :m '>+1<CR>gv=gv
vnoremap <M-k> :m '<-2<CR>gv=gv

" Copy/Paste system clipboard
nnoremap <Leader>y "+y
nnoremap <Leader>p "+p
nnoremap Y y$

" Format entire file with =
nnoremap g= gg=G

" Execute last recorded macro
nnoremap Q @@

" =============================================================================
" = Plugin Manager (PLUG) =
" =============================================================================

" Bootstrap - ensure vim-packager is installed
let s:plugin = #{
  \ name: 'vim-packager',
  \ base_dir: expand('~/.vim/pack/packager'),
  \ git: 'https://github.com/kristijanhusak/vim-packager.git',
  \ path: expand('~/.vim/pack/packager/opt/vim-packager'),
\ }

if !isdirectory(s:plugin.path)
  echo printf('Downloading %s plugin manager...', s:plugin.name)

  let s:gitcmd = ['git', 'clone', s:plugin.git, s:plugin.path]
  call system(s:gitcmd->join(' '))
endif

" List all plugins
function! PackagerInit() abort
  packadd vim-packager

  call packager#init()

  " Self-care
  call packager#add('kristijanhusak/vim-packager', #{ type: 'opt' })

  " Plugin dependencies {{{
  call packager#add('Shougo/context_filetype.vim')
  call packager#add('vim-denops/denops.vim')
  call packager#add('lambdalisue/nerdfont.vim')
  " }}}

  " Core {{{
  call packager#add('cohama/lexima.vim')
  call packager#add('godlygeek/tabular')
  call packager#add('tpope/vim-surround')
  call packager#add('tpope/vim-abolish')
  call packager#add('tpope/vim-repeat')
  call packager#add('tyru/caw.vim')
  call packager#add('editorconfig/editorconfig-vim')
  call packager#add('creativenull/projectlocal-vim')
  call packager#add('mattn/emmet-vim')
  " }}}

  " File Explorer {{{
  call packager#add('lambdalisue/fern.vim')
  call packager#add('lambdalisue/nerdfont.vim')
  call packager#add('lambdalisue/fern-renderer-nerdfont.vim')
  " }}}

  " Fuzzy Finder {{{
  call packager#add('junegunn/fzf')
  call packager#add('junegunn/fzf.vim')
  " }}}

  " Snippets {{{
  call packager#add('SirVer/ultisnips')
  call packager#add('honza/vim-snippets')
  " }}}

  " Git {{{
  call packager#add('tpope/vim-fugitive')
  call packager#add('airblade/vim-gitgutter')
  " }}}

  " Linter and formatter configurations {{{
  call packager#add('dense-analysis/ale')
  " }}}

  " Auto completion + LSP client {{{
  call packager#add('neoclide/coc.nvim', #{ branch: 'release' })
  call packager#add('fannheyward/coc-deno', #{ do: 'yarn install --frozen-lockfile' })
  call packager#add('marlonfan/coc-phpls', #{ do: 'yarn install --frozen-lockfile' })
  call packager#add('neoclide/coc-css', #{ do: 'yarn install --frozen-lockfile' })
  call packager#add('neoclide/coc-html', #{ do: 'yarn install --frozen-lockfile' })
  call packager#add('neoclide/coc-json', #{ do: 'yarn install --frozen-lockfile' })
  call packager#add('neoclide/coc-snippets', #{ do: 'yarn install --frozen-lockfile' })
  call packager#add('neoclide/coc-tsserver', #{ do: 'yarn install --frozen-lockfile' })
  call packager#add('neoclide/coc-vetur', #{ do: 'yarn install --frozen-lockfile' })
  call packager#add('yaegassy/coc-volar', #{ do: 'yarn install --frozen-lockfile' })
  " }}}

  " File syntax plugins {{{
  call packager#add('pangloss/vim-javascript')
  call packager#add('MaxMEllon/vim-jsx-pretty')
  call packager#add('heavenshell/vim-jsdoc', #{ do: 'make install' })
  call packager#add('posva/vim-vue')
  call packager#add('jwalton512/vim-blade')
  call packager#add('elzr/vim-json')
  call packager#add('kevinoid/vim-jsonc')
  call packager#add('junegunn/vader.vim')
  " }}}

  " UI Jetpackins {{{
  call packager#add('Yggdroot/indentLine')
  call packager#add('machakann/vim-highlightedyank')
  call packager#add('itchyny/lightline.vim')
  call packager#add('mengelbrecht/lightline-bufferline')
  " }}}

  " Colorschemes {{{
  call packager#add('bluz71/vim-nightfly-guicolors')
  call packager#add('bluz71/vim-moonfly-colors')
  call packager#add('fnune/base16-vim')
  call packager#add('nanotech/jellybeans.vim')
  call packager#add('keqizeng/nightelf')
  " }}}
endfunction

command! -nargs=* -bar PackagerInstall call PackagerInit() | call packager#install(<args>)
command! -nargs=* -bar PackagerUpdate call PackagerInit() | call packager#update(<args>)
command! -bar PackagerClean call PackagerInit() | call packager#clean()
command! -bar PackagerStatus call PackagerInit() | call packager#status()

" =============================================================================
" = Plugin Configurations (POST) =
" =============================================================================

" Emmet Config
" ---
call cnull#emmet#Setup()

" fern.vim Config
" ---
call cnull#fern#Setup()

" fzf.vim Config
" ---
call cnull#fzf#Setup()

" vim-gitgutter Config
" ---
let g:gitgutter_map_keys = 0

" ale Config
" ---
call cnull#ale#Setup()

" coc.nvim Config
" ---
call cnull#coc#Setup()

" vim-vue Config
" ---
let g:vue_pre_processors = []

" vim-json Config
" ---
let g:vim_json_conceal = 0

" indentLine Config
" ---
let g:indentLine_char = 'â”‚'

" vim-highlightedyank Config
" ---
call cnull#highlightedyank#Setup()

" lightline.vim Config
" ---
call cnull#lightline#Setup()

" =============================================================================
" = UI/Theme (THEME) =
" =============================================================================

set background=dark
colorscheme nightelf
