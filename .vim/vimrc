" Name: Arnold Chand
" Github: https://github.com/creativenull
" Description: My vimrc, currently tested on a Linux machine. Requires:
"   + git
"   + curl
" =============================================================================

filetype plugin indent on
syntax on

" Pre-Requisites
if !executable('git')
  echoerr '[vim] `git` is needed!'
  finish
endif

if !executable('curl')
  echoerr '[vim] `curl` is needed!'
  finish
endif

" =============================================================================
" = Functions =
" =============================================================================

function! g:MakeConfig() abort
  let std_cache = ''
  let std_config = ''
  let std_data = ''
  if has('win32')
    let std_cache = expand('$HOME/AppData/Local/Temp/vim')
    let std_config = expand('$HOME/vimfiles')
    let std_data = expand('$HOME/vimfiles')
  else
    let std_cache = expand('$HOME/.cache/vim')
    let std_config = expand('$HOME/.vim')
    let std_data = expand('$HOME/.vim')
  endif

  return {
    \ 'std_cache': std_cache,
    \ 'std_config': std_config,
    \ 'std_data': std_data,
    \ 'undodir': printf('%s/undo', std_cache),
  \ }
endfunction

function! g:ToggleConcealLevel() abort
  if &conceallevel == 2
    set conceallevel=0
    let g:vim_markdown_conceal = 0
    let g:vim_markdown_conceal_code_blocks = 0
  else
    set conceallevel=2
    let g:vim_markdown_conceal = 1
    let g:vim_markdown_conceal_code_blocks = 1
  endif
endfunction

function! g:ToggleCodeshot() abort
  if &number
    setlocal nonumber signcolumn=no
  else
    setlocal number signcolumn=yes
  endif
endfunction

" =============================================================================
" = Initialize =
" =============================================================================

let mapleader = ' '
let g:cnull = {}
let g:cnull.transparent = v:false
let g:cnull.config = MakeConfig()

" =============================================================================
" = Events =
" =============================================================================

if g:cnull.transparent
  augroup transparent_events
    autocmd!
    autocmd ColorScheme * highlight! Normal guibg=NONE
    autocmd ColorScheme * highlight! SignColumn guibg=NONE
    autocmd ColorScheme * highlight! LineNr guibg=NONE
    autocmd ColorScheme * highlight! CursorLineNr guibg=NONE
    autocmd ColorScheme * highlight! EndOfBuffer guibg=NONE
  augroup END
endif

" =============================================================================
" = Plugin Pre-Config - before loading plugins =
" =============================================================================

" vim-vue Config
" ---
let g:vue_pre_processors = []

" emmet-vim Config
" ---
let g:user_emmet_leader_key = '<C-q>'
let g:user_emmet_install_global = 0
let g:user_emmet_mode = 'i'

augroup emmet_user_events
  autocmd!
  autocmd FileType html,blade,php,javascriptreact,typescriptreact,vue EmmetInstall
augroup END

" hlyank Config
" ---
let g:highlightedyank_highlight_duration = 500

augroup user_highlightedyank_events
  autocmd!
  autocmd ColorScheme * highlight! default link HighlightedyankRegion Search
augroup END

" buftabline Config
" ---
let g:buftabline_numbers = 2
let g:buftabline_indicators = 1

" fern.vim Config
" ---
nnoremap <silent> <Leader>ff <Cmd>Fern . -reveal=%<CR>

" json.vim Config
" ---
let g:vim_json_conceal = 0

" vim-mucomplete
" ---
let g:mucomplete#enable_auto_at_startup = 1
let g:mucomplete#completion_delay = 1
let g:mucomplete#no_mappings = 1
let g:mucomplete#chains = {}
let g:mucomplete#chains.default = ['path', 'omni', 'keyn', 'vsnip']

imap <unique> <C-@> <Plug>(MUcompleteFwd)

" vim-vsnip
" ---
imap <expr> <C-q>. vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<NOP>'

" =============================================================================
" = Plugin Manager =
" =============================================================================

" Bootstrap - download vim-plug into autoload directory if it doesn't exist
let s:plugin = {}
let s:plugin.git = 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
let s:plugin.filepath = g:cnull.config.std_data . '/autoload/plug.vim'
let s:plugin.plugins_dir = g:cnull.config.std_data . '/plugged'

if !filereadable(s:plugin.filepath)
  execute printf('!curl -fLo %s --create-dirs %s', s:plugin.filepath, s:plugin.git)
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin(s:plugin.plugins_dir)

" Core
Plug 'Shougo/context_filetype.vim'
Plug 'tyru/caw.vim'
Plug 'cohama/lexima.vim'
Plug 'editorconfig/editorconfig-vim'
Plug 'godlygeek/tabular'
Plug 'mattn/emmet-vim'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'

" Git
Plug 'airblade/vim-gitgutter'

" File Explorer
Plug 'lambdalisue/fern.vim'

" Autocompletion
Plug 'lifepillar/vim-mucomplete'

" Snippets
Plug 'hrsh7th/vim-vsnip-integ'
Plug 'hrsh7th/vim-vsnip'
Plug 'rafamadriz/friendly-snippets'

" UI/Syntax
Plug 'ap/vim-buftabline'
Plug 'machakann/vim-highlightedyank'
Plug 'kevinoid/vim-jsonc'
Plug 'posva/vim-vue'
Plug 'neoclide/vim-jsx-improve'
Plug 'peitalin/vim-jsx-typescript'
Plug 'jwalton512/vim-blade'

" Colorscheme
Plug 'bluz71/vim-moonfly-colors'
Plug 'bluz71/vim-nightfly-guicolors'

call plug#end()

" =============================================================================
" = Plugin Post-Config - after loading plugins =
" =============================================================================



" =============================================================================
" = UI/Theme =
" =============================================================================

if has('termguicolors')
  set termguicolors
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif

set number
set background=dark
colorscheme moonfly

" =============================================================================
" = Options =
" =============================================================================

if !isdirectory(g:cnull.config.undodir)
  execute printf('silent !mkdir -p %s', g:cnull.config.undodir)
endif

" Completion
set completeopt=menuone,noinsert,noselect
set shortmess+=c
set wildmenu
set wildignorecase

" Search
set ignorecase
set smartcase
set hlsearch
set incsearch
set showmatch
set path=**
set wildignore=*/node_modules/*,*/vendor/*

" Editor
set shiftwidth=4
set softtabstop=4
set tabstop=4
set expandtab
set smartindent
set smarttab
set autoindent
set nowrap
set colorcolumn=120
set scrolloff=5
set nospell

" System
set encoding=utf-8
set nobackup
set noswapfile
set updatetime=250
set undofile
set undolevels=10000
set history=10000
set backspace=indent,eol,start
set ttimeoutlen=50
set mouse=
set lazyredraw
let &undodir=cnull.config.undodir

" UI
set hidden
set conceallevel=0
set signcolumn=yes
set cmdheight=2
set showtabline=2
set laststatus=2

" =============================================================================
" = Keybindings =
" =============================================================================

" Unbind default bindings for arrow keys, trust me this is for your own good
noremap  <Up>    <Nop>
noremap  <Down>  <Nop>
noremap  <Left>  <Nop>
noremap  <Right> <Nop>
inoremap <Up>    <Nop>
inoremap <Down>  <Nop>
inoremap <Left>  <Nop>
inoremap <Right> <Nop>

" Resize window panes, we can use those arrow keys
" to help use resize windows - at least we give them some purpose
nnoremap <Up>    <Cmd>resize +2<CR>
nnoremap <Down>  <Cmd>resize -2<CR>
nnoremap <Left>  <Cmd>vertical resize -2<CR>
nnoremap <Right> <Cmd>vertical resize +2<CR>

" Map Esc, to perform quick switching between Normal and Insert mode
inoremap jk <Esc>

" Map escape from terminal input to Normal mode
tnoremap <Esc> <C-\><C-n>
tnoremap <C-[> <C-\><C-n>

" Disable highlights
nnoremap <Leader><CR> <Cmd>noh<CR>

" List all buffers
nnoremap <Leader>bb <Cmd>buffers<CR>
" Go to next buffer
nnoremap <C-l> <Cmd>bnext<CR>
nnoremap <Leader>bn <Cmd>bnext<CR>
" Go to previous buffer
nnoremap <C-h> <Cmd>bprevious<CR>
nnoremap <Leader>bp <Cmd>bprevious<CR>
" Close the current buffer, and more?
nnoremap <Leader>bd <Cmd>bp<Bar>sp<Bar>bn<Bar>bd<CR>
" Close all buffer, except current
nnoremap <Leader>bx <Cmd>%bd<Bar>e#<Bar>bd#<CR>

" Edit vimrc
nnoremap <Leader>ve <Cmd>edit $MYVIMRC<CR>

" Source the vimrc to reflect changes
nnoremap <Leader>vs <Cmd>ConfigReload<CR>

" Reload file
nnoremap <Leader>r <Cmd>edit!<CR>

" List all maps
nnoremap <Leader>mn <Cmd>nmap<CR>
nnoremap <Leader>mv <Cmd>vmap<CR>
nnoremap <Leader>mi <Cmd>imap<CR>
nnoremap <Leader>mt <Cmd>tmap<CR>
nnoremap <Leader>mc <Cmd>cmap<CR>

" Move lines up/down with alt+j/k
set <M-j>=j
set <M-k>=k
nnoremap <M-j> :m .+1<CR>==
nnoremap <M-k> :m .-2<CR>==
vnoremap <M-j> :m '>+1<CR>gv=gv
vnoremap <M-k> :m '<-2<CR>gv=gv

" Copy/Paste system clipboard
nnoremap <Leader>y "+y
nnoremap <Leader>p "+p
nnoremap Y y$

" Disable Ex-mode
nnoremap Q <Nop>

" =============================================================================
" = Commands =
" =============================================================================

command! Config edit $MYVIMRC
command! ConfigReload source $MYVIMRC | nohlsearch

command! ToggleConcealLevel ToggleConcealLevel()
command! ToggleCodeshot ToggleCodeshot()

" Command Abbreviations
cnoreabbrev Q q
cnoreabbrev Qa qa
cnoreabbrev W w
cnoreabbrev Wq wq
